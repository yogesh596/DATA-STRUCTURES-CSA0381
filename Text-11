#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    char items[MAX_SIZE];
};

void initialize(struct Stack* stack) {
    stack->top = -1;
}

bool isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

bool isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(struct Stack* stack, char value) {
    if (!isFull(stack)) {
        stack->items[++stack->top] = value;
    }
}

char pop(struct Stack* stack) {
    if (!isEmpty(stack)) {
        return stack->items[stack->top--];
    }
    return '\0';
}

char peek(struct Stack* stack) {
    if (!isEmpty(stack)) {
        return stack->items[stack->top];
    }
    return '\0';
}

bool isBalanced(char expression[]) {
    struct Stack stack;
    initialize(&stack);
    int len = strlen(expression);

    for (int i = 0; i < len; i++) {
        if (expression[i] == '(' || expression[i] == '{' || expression[i] == '[') {
            push(&stack, expression[i]);
        } else if (expression[i] == ')' || expression[i] == '}' || expression[i] == ']') {
            if (isEmpty(&stack)) {
                return false;
            } else {
                char top = pop(&stack);
                if ((expression[i] == ')' && top != '(') ||
                    (expression[i] == '}' && top != '{') ||
                    (expression[i] == ']' && top != '[')) {
                    return false;
                }
            }
        }
    }

    return isEmpty(&stack);
}

int main() {
    int n;
    scanf("%d", &n);
    char expressions[n][MAX_SIZE];
    
    for (int i = 0; i < n; i++) {
        scanf("%s", expressions[i]);
    }

    for (int i = 0; i < n; i++) {
        if (isBalanced(expressions[i])) {
            printf("YES\n");
        } else {
            printf("NO\n");
        }
    }

    return 0;
}
