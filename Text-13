#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    int items[MAX_SIZE];
};

void initialize(struct Stack* stack) {
    stack->top = -1;
}

bool isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

bool isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(struct Stack* stack, int value) {
    if (!isFull(stack)) {
        stack->items[++stack->top] = value;
    }
}

int pop(struct Stack* stack) {
    if (!isEmpty(stack)) {
        return stack->items[stack->top--];
    }
    return 0; // Return a default value, actual value should be handled properly
}

int evaluatePostfix(char postfix[]) {
    struct Stack stack;
    initialize(&stack);
    int len = strlen(postfix);

    for (int i = 0; i < len; i++) {
        char ch = postfix[i];

        if (ch >= '0' && ch <= '9') {
            push(&stack, ch - '0'); // Convert char to integer
        } else {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);

            switch (ch) {
                case '+': push(&stack, operand1 + operand2); break;
                case '-': push(&stack, operand1 - operand2); break;
                case '*': push(&stack, operand1 * operand2); break;
                case '/': push(&stack, operand1 / operand2); break;
                // Handle other operators if needed
            }
        }
    }

    return pop(&stack);
}

int main() {
    char postfix[MAX_SIZE];
    scanf("%s", postfix);

    int result = evaluatePostfix(postfix);
    printf("Output: %d\n", result);

    return 0;
}
