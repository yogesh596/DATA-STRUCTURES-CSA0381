#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

bool isValidBSTUtil(struct TreeNode* root, long long int minVal, long long int maxVal) {
    if (root == NULL) {
        return true;
    }
    
    if (root->val <= minVal || root->val >= maxVal) {
        return false;
    }
    
    return isValidBSTUtil(root->left, minVal, root->val) && isValidBSTUtil(root->right, root->val, maxVal);
}

bool isValidBST(struct TreeNode* root) {
    return isValidBSTUtil(root, LLONG_MIN, LLONG_MAX);
}

// Helper function to create a new node
struct TreeNode* newNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

int main() {
    struct TreeNode* root1 = newNode(2);
    root1->left = newNode(1);
    root1->right = newNode(3);
    printf("Output for tree 1: %d\n", isValidBST(root1));

    struct TreeNode* root2 = newNode(2);
    root2->right = newNode(7);
    root2->right->right = newNode(6);
    root2->right->right->right = newNode(5);
    root2->right->right->right->right = newNode(9);
    root2->right->right->right->right->right = newNode(2);
    root2->right->right->right->right->right->right = newNode(6);
    printf("Output for tree 2: %d\n", isValidBST(root2));

    return 0;
}
